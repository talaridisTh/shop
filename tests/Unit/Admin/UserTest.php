<?php

namespace Tests\Unit\Admin;

use App\Models\User;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class UserTest extends TestCase {

    protected $userFactory;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userFactory = User::create([
            'id' => 2,
            'name' => "user",
            'slug' => "user",
            "status" => 'user',
            'email' => "user@gmail.com",
            'password' => "password",
        ]);

    }

    /** @test */
    public function it_can_list_all_users()
    {
        $users = User::factory()->count(10)->create();
        $this->assertInstanceOf(Collection::class, $users);
        $this->assertCount(10, $users->all()); // +1 in the TestCase
    }

    /** @test */
    public function it_can_create_a_user()
    {

        $this->assertInstanceOf(User::class, $this->userFactory);
        $this->assertEquals($this->userFactory->name, User::find(2)->name);
    }

    /** @test */
    public function it_can_update_a_user()
    {

        $this->userFactory->update(["name" => "user_rename"]);
        $this->assertInstanceOf(User::class, $this->userFactory);
        $this->assertEquals($this->userFactory->name, User::find(2)->name);
    }

    /** @test */
    public function it_can_delete_a_user()
    {

        $deleted = $this->userFactory->delete();
        $this->assertTrue($deleted);
    }

    /** @test */
    public function it_can_restore_a_user()
    {

        $this->userFactory->delete();
        $this->assertFalse(!empty(User::find(2)));
        $this->userFactory->restore();
        $this->assertTrue(User::find(2)->exists());
    }

}
