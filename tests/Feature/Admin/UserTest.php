<?php

namespace Tests\Feature\Admin;

use App\Models\User;
use Inertia\Testing\Assert;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UserTest extends TestCase {

    protected $userFactory;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userFactory = User::create([
            'id' => 2,
            'name' => "user",
            'slug' => "user-slug",
            "status" => 'inactive',
            'email' => "user@gmail.com",
            'password' => "password",
        ]);

    }

    /** @test */
    public function it_can_see_user_in_page()
    {

        $this->actingAs($this->user)
            ->get(route("user.index"))
            ->assertInertia(fn(Assert $assert) => $assert
                ->component('Admin/User/UserIndex')
                ->has('users.data', 2)
                ->where("users.data.1.name", "user")
            )->assertSee("user@gmail.com");
    }

    /** @test */
    public function it_can_search_for_user()
    {

        $this->actingAs($this->user)
            ->get("/admin/user?search=user")
            ->assertSee("user@gmail.com");
    }

    /** @test */
    public function it_can_see_inactive_user()
    {

        $this->actingAs($this->user)
            ->get("/admin/user?status=Inactive")
            ->assertSee("user@gmail.com");
    }

    /** @test */
    public function it_can_see_active_user()
    {

        $this->userFactory->changeStatus(User::STATUS[1]);
        $this->actingAs($this->user)
            ->get("/admin/user?status=Active")
            ->assertSee("user@gmail.com");
    }

    /** @test */
    public function it_can_see_trash_user()
    {

        $this->userFactory->changeStatus(User::STATUS[2]);
        $this->actingAs($this->user)
            ->get("/admin/user?status=Trash")
            ->assertSee("user@gmail.com");
    }

    /** @test */
    public function it_can_20_per_page()
    {

        User::factory()->count(50)->create();
        $this->actingAs($this->user)
            ->get("/admin/user?limit=20")
            ->assertInertia(fn(Assert $assert) => $assert
                ->component('Admin/User/UserIndex')
                ->has('users.data', 20)
            );
    }

    /** @test */
    public function it_can_asc_order_user_name()
    {
        $this->userFactory->update(["name" => "admin"]);
        $this->actingAs($this->user)
            ->get("/admin/user?sort=name&order=asc")
            ->assertInertia(fn(Assert $assert) => $assert
                ->component('Admin/User/UserIndex')
                ->where('users.data.1.name', 'admin')
            );
    }

    /** @test */
    public function it_can_desc_order_user_name()
    {
        $this->userFactory->update(["name" => "admin"]);
        $this->actingAs($this->user)
            ->get("/admin/user?sort=name&order=desc")
            ->assertInertia(fn(Assert $assert) => $assert
                ->component('Admin/User/UserIndex')
                ->where('users.data.0.name', 'admin')
            );
    }

    /** @test */
    public function it_can_create_a_user()
    {
        $data = [
            'name' => "user_2",
            "status" => 0,
            "role" => 'user',
            'email' => "user_2@gmail.com",
            'password' => "password",
            'password_confirmation' => "password",
        ];
        $this->actingAs($this->user)
            ->post(route('user.store'), $data)
            ->assertSessionHas("success", $data["name"] . " created")
            ->assertStatus(302);
        $this->assertTrue(User::firstWhere("name", $data["name"])->exists());
    }

    /** @test */
    public function it_can_validate_when_create_user_form_missing_email()
    {
        $data = [
            'name' => "user_2",
            "status" => 0,
            "role" => 'user',
            'password' => "password",
            'password_confirmation' => "password",
        ];
        $this->actingAs($this->user)
            ->post(route('user.store'), $data)
            ->assertSessionHasErrors("email", "The email field is required.");

    }

    /** @test */
    public function it_can_update_a_user()
    {

        $data = [
            'name' => "rename_user",
            "status" => 0,
            "role" => "User",
            'email' => "user@gmail.com",
        ];
        $this->actingAs($this->user)
            ->put(route('user.update', $this->userFactory->slug), $data)
            ->assertSessionHas("success", $data["name"] . " updated")
            ->assertStatus(302);
        $this->get(route('user.edit', $this->userFactory->slug))
            ->assertInertia(fn(Assert $assert) => $assert
                ->component('Admin/User/UserEdit')
                ->has('user', fn(Assert $page) => $page
                    ->where('name', $data["name"])
                    ->etc()
                ));
        $this->assertTrue(User::firstWhere("name", "rename_user")->exists());
    }

    /** @test */
    public function it_can_validate_when_update_user_form_missing_name()
    {
        $data = [
            "status" => 0,
            'email' => "user@gmail.com",
        ];
        $this->actingAs($this->user)
            ->put(route('user.update', $this->userFactory->slug), $data)
            ->assertSessionHasErrors("name", "The name field is required.");

    }

    /** @test */
    public function it_can_delete_a_user()
    {
        $this->actingAs($this->user)
            ->delete(route('user.destroy', $this->userFactory->slug))
            ->assertSessionHas("success", $this->userFactory->name . " deleted.");
        $this->assertTrue(User::onlyTrashed()->where("name", $this->userFactory->name)->exists());
    }

    /** @test */
    public function it_can_restore_a_user()
    {
        $this->actingAs($this->user)
            ->put(route('user.restore', $this->userFactory->slug))
            ->assertSessionHas("success", $this->userFactory->name . " restored.");
        $this->assertTrue(User::where("name", $this->userFactory->name)->exists());
    }

}